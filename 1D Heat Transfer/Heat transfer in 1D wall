{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ed80476-c049-4df9-8706-b31b05d72f02",
   "metadata": {},
   "source": [
    "# Approximating the temperature of a one-dimensional wall using the heat diffusion equation \n",
    "\n",
    "This tutorial is based on the YouTube video linked [here](https://www.youtube.com/watch?v=6-2Wzs0sXd8).\n",
    "\n",
    "We consider a one-dimensional wall of length $L$, with the left and right surface temperatures being $T_{1,s}$ and $T_{2,s}$ respectively. The temperature decreases from left to right along the wall length, and is also a function of time. The wall is spatially discretized into $n$ nodes, and the temperature derivative (with respect to time $t$) at node $i$ is given by:\n",
    "$$ \\frac{dT(i)}{dt} = \\alpha \\bigg[\\frac{-(T_i - T_{i-1})}{\\Delta x^2} + \\frac{(T_{i+1}-T_i}{\\Delta x^2} \\bigg]$$\n",
    "Here, $\\alpha$ is the thermal diffusivity constant of the wall and $\\Delta x$ is the width of each node.\n",
    "\n",
    "The approximated temperature is given by:\n",
    "$$ T(t+\\Delta t) = T(t) + \\frac{dT}{dt}\\bigg|_t \\times \\Delta t $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aa6916b-3e4a-49ff-be3b-f00d74fccef5",
   "metadata": {},
   "source": [
    "<p style=\"text-align: left\"> <img src=\"1D_heat_equation.jpg\" width=\"1000\"/> </p>"
   ]
  },

  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "382ae913-67b3-401d-a3fb-ae5de63e7d3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<contextlib.ExitStack at 0x74df9416e850>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "matplotlib.use('TkAgg')\n",
    "plt.ion()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d0b0877-7c68-4860-b2d8-28bc6f6e60b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the constants.\n",
    "\n",
    "L = 0.1     # Length of the slab is 0.1 m\n",
    "n = 10      # Number of spatial nodes\n",
    "T0 = 0      # Initial temperature at all position is zero, i.e. T(0, x) = 0\n",
    "\n",
    "T1s = 40    # Temperature of the left surface of the wall\n",
    "T2s = 20    # Temperature of the right surface of the wall\n",
    "\n",
    "dx = L/n    # Length of each node of the wall\n",
    "\n",
    "alpha = 0.0001   # Thermal diffusivity constant of the wall\n",
    "t_final = 60     # Elapsed time\n",
    "dt = 0.1         # Considered time step\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b15591ea-1a57-4268-9d68-3f6fa1c03693",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We define the discrete x points at the center of each node.\n",
    "# There are a total of n nodes and the length of the slab is L.\n",
    "# The first point is hence dx/2 and the final point is (L - dx/2)\n",
    "\n",
    "x = np.linspace(dx/2, L-dx/2, n)\n",
    "\n",
    "T = np.zeros(n)\n",
    "\n",
    "dT_dt = np.empty(n)\n",
    "\n",
    "t = np.arange(0, t_final, dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26428a70-3d7b-4fd5-95f0-9731160e571a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Note that the index of the first node is 0 while that of the last node is n-1.\n",
    "# For i = 0, T[i-1] = T[0-1] = T1s and for i = n-1, T[i+1] = T[n] = T2s.\n",
    "\n",
    "for j in range(1, len(t)):    # Loop through the time steps\n",
    "    plt.clf()\n",
    "    for i in range(1, n-1):      # Loop through the spatial nodes\n",
    "        dT_dt[i] = alpha * (-(T[i]-T[i-1])/dx**2 + (T[i+1]-T[i])/dx**2)\n",
    "        \n",
    "    dT_dt[0] = alpha * (-(T[0]-T1s)/dx**2 + (T[1]-T[0])/dx**2)   # 0-th node\n",
    "    dT_dt[n-1] = alpha * (-(T[n-1]-T[n-2])/dx**2 + (T2s-T[n-1])/dx**2)  # (n-1)-th node\n",
    "\n",
    "    # Update the temperature at each time.\n",
    "    T = T + dT_dt * dt\n",
    "\n",
    "    plt.figure(1)\n",
    "    plt.plot(x, T)\n",
    "    plt.axis([0, L, 0, 50])\n",
    "    plt.xlabel('Length (m)')\n",
    "    plt.ylabel('Temperature (C)')\n",
    "    plt.show()\n",
    "    plt.pause(0.05)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "935e91c8-e97a-4a47-a2f6-ca8c77b6cca7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
